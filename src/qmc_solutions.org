#+TITLE: QMC-LTTC 2023 Exercises
#+AUTHOR: Vijay Gopal Chilkuri
#+LANGUAGE:  en
#+INFOJS_OPT: toc:t mouse:underline path:org-info.js
#+STARTUP: latexpreview
#+LATEX_CLASS: article
#+LATEX_HEADER_EXTRA: \usepackage{minted}
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="worg.css" type="text/css" />

#+OPTIONS: H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
# EXCLUDE_TAGS: solution solution2 noexport
# EXCLUDE_TAGS: solution noexport
#+EXCLUDE_TAGS: noexport

  #+BEGIN_SRC elisp :output none :exports none
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options '(("breaklines" "true")
                                 ("breakanywhere" "true")))
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")
        ("linenos" "")))
(org-beamer-export-to-pdf)

  #+END_SRC

  #+RESULTS:
  : /home/chilkuri/Documents/codes/julia/qmc-lttc-2023/qmc_solutions.pdf



* Numerical evaluation of the energy of the hydrogen atom

** Local energy
   :PROPERTIES:
   :header-args:julia: :tangle hydrogen.jl
   :END:

*** Exercise 1

    #+begin_exercise
    Write a function which computes the potential at $\mathbf{r}$.
    The function accepts a 3-dimensional vector =r= as input argument
    and returns the potential.
    #+end_exercise

    $\mathbf{r}=\left( \begin{array}{c} x \\ y\\ z\end{array} \right)$, so
    $$
    V(\mathbf{r}) = -\frac{1}{\sqrt{x^2 + y^2 + z^2}}
    $$


**** Solution                                                      :solution:
    *Julia*
     #+BEGIN_SRC julia :results none
using LinearAlgebra

function potential(r)
    nr = norm(r);
    @assert (nr > 0.0);
    return(-1.0/nr)
end
     #+END_SRC

*** Exercise 2
    #+begin_exercise
    Write a function which computes the wave function at $\mathbf{r}$.
    The function accepts a scalar =a= and a 3-dimensional vector =r= as
    input arguments, and returns a scalar.
    #+end_exercise

**** Solution                                                      :solution:
    *Julia*
     #+BEGIN_SRC julia :results none
function psi(a, r)
    return exp(-a*norm(r))
end
     #+END_SRC
*** Exercise 3
    #+begin_exercise
    Write a function which computes the local kinetic energy at $\mathbf{r}$.
    The function accepts =a= and =r= as input arguments and returns the
    local kinetic energy.
    #+end_exercise

    The local kinetic energy is defined as $$T_L(\mathbf{r}) = -\frac{1}{2}\frac{\Delta \Psi(\mathbf{r})}{\Psi(\mathbf{r})}.$$

    We differentiate $\Psi$ with respect to $x$:

    \[ \Psi(\mathbf{r})  =  \exp(-a\,|\mathbf{r}|) \]
    \[\frac{\partial \Psi}{\partial x}
      = \frac{\partial \Psi}{\partial |\mathbf{r}|} \frac{\partial |\mathbf{r}|}{\partial x}
      =  - \frac{a\,x}{|\mathbf{r}|} \Psi(\mathbf{r}) \]

    and we differentiate a second time:

    $$
    \frac{\partial^2 \Psi}{\partial x^2} =
    \left( \frac{a^2\,x^2}{|\mathbf{r}|^2}  -
    \frac{a(y^2+z^2)}{|\mathbf{r}|^{3}} \right) \Psi(\mathbf{r}).
    $$

    The Laplacian operator $\Delta = \frac{\partial^2}{\partial x^2} +
    \frac{\partial^2}{\partial y^2} + \frac{\partial^2}{\partial z^2}$
    applied to the wave function gives:

    $$
    \Delta \Psi (\mathbf{r}) = \left(a^2 - \frac{2a}{\mathbf{|r|}} \right) \Psi(\mathbf{r})\,.
    $$

    Therefore, the local kinetic energy is
    $$
    T_L (\mathbf{r}) = -\frac{1}{2}\left(a^2 - \frac{2a}{\mathbf{|r|}} \right)
    $$

    *Julia*
     #+BEGIN_SRC julia :results none
function kinetic(a,r)
    nr = norm(r);
    @assert (nr > 0.0);
    return(-0.5 * (a*a - 2.0*a/nr))
end
     #+END_SRC

*** Exercise 4
    #+begin_exercise
    Write a function which computes the local energy at $\mathbf{r}$,
    using the previously defined functions.
    The function accepts =a= and =r= as input arguments and returns the
    local kinetic energy.
    #+end_exercise

    $$
    E_L(\mathbf{r}) = -\frac{1}{2} \frac{\Delta \Psi}{\Psi} (\mathbf{r}) + V(\mathbf{r})
    $$


    *Julia*
     #+BEGIN_SRC julia :results none
function e_loc(a,r)
    epot = potential(r);
    ekin = kinetic(a,r);
    return( ekin + epot )
end
     #+END_SRC

** Plot of the local energy along the $x$ axis
   :PROPERTIES:
   :header-args:julia: :tangle plot_hydrogen.jl
   :END:

*** Exercise

    #+begin_exercise
    For multiple values of $a$ (0.1, 0.2, 0.5, 1., 1.5, 2.), plot the
    local energy along the $x$ axis. In Python, you can use matplotlib
    for example. In Fortran, it is convenient to write in a text file
    the values of $x$ and $E_L(\mathbf{r})$ for each point, and use
    Gnuplot to plot the files. With Gnuplot, you will need 2 blank
    lines to separate the data corresponding to different values of $a$.
    #+end_exercise

   #+begin_note
   The potential and the kinetic energy both diverge at $r=0$, so we
   choose a grid which does not contain the origin to avoid numerical issues.
   #+end_note

**** Solution                                                      :solution:
    *Julia*
     #+BEGIN_SRC julia :results none
using LinearAlgebra
using Plots

include("hydrogen.jl")

x=range(-5,5,length=100)
y=x .|> y->e_loc(0.1,y)
plt = plot(x,y,label="a=0.1")

for a in [0.2, 0.5, 1., 1.5, 2.]
  y=x .|> y->e_loc(a,y)
  plot!(x,y,label="a=$(a)");
end

savefig(plt, "plot_py.png")
     #+end_src
** Numerical estimation of the energy
   :PROPERTIES:
   :header-args:julia: :tangle energy_hydrogen.jl
   :END:

*** Exercise
     #+begin_exercise
    Compute a numerical estimate of the energy using a grid of
    $50\times50\times50$ points in the range $(-5,-5,-5) \le
    \mathbf{r} \le (5,5,5)$.
     #+end_exercise
**** Solution                                                      :solution:
    *Julia*
     #+BEGIN_SRC julia :results output :exports both
using LinearAlgebra
include("hydrogen.jl");


interval = range(-5,5,length=50);
delta = (interval[2]-interval[1])^3;

r = [0.,0.,0.];
for a in [0.1, 0.2, 0.5, 0.9, 1., 1.5, 2.]
    E    = 0.;
    norm = 0.;

    for x in interval
        r[1] = x;
        for y in interval
            r[2] = y;
            for z in interval
                r[3] = z;

                w = psi(a,r);
                w = w * w * delta;

                E    += w * e_loc(a,r);
                norm += w;
            end
        end
    end
    E = E / norm;
    println("a = $(a) \t E = $(E)")
end
     #+end_src

     #+RESULTS:
     : a = 0.1 	 E = -0.24518438948809218
     : a = 0.2 	 E = -0.26966057967803525
     : a = 0.5 	 E = -0.3856357612517401
     : a = 0.9 	 E = -0.49435709786716214
     : a = 1.0 	 E = -0.5
     : a = 1.5 	 E = -0.3924296708260237
     : a = 2.0 	 E = -0.08086980667845059

*** Exercise
   #+begin_exercise
   Add the calculation of the variance to the previous code, and
   compute a numerical estimate of the variance of the local energy using
   a grid of $50\times50\times50$ points in the range $(-5,-5,-5) \le
   \mathbf{r} \le (5,5,5)$ for different values of $a$.

   #+end_exercise
     *Julia*
     #+BEGIN_SRC julia :results output :exports both
using LinearAlgebra
include("hydrogen.jl");


interval = range(-5,5,length=50);
delta = (interval[2]-interval[1])^3;

r = [0.,0.,0.];

for a in [0.1, 0.2, 0.5, 0.9, 1., 1.5, 2.]
    E    = 0.;
    E2   = 0.;
    norm = 0.;

    for x in interval
        r[1] = x;
        for y in interval
            r[2] = y;
            for z in interval
                r[3] = z;

                w = psi(a,r);
                w = w * w * delta;

                E    += w * e_loc(a,r);
                E2   += w * e_loc(a,r) * e_loc(a,r);
                norm += w;
            end
        end
    end
    E = E / norm;
    E2= E2/ norm;
    var = E2 - E*E;
    println("a = $(a) \t E = $(E) \t σ^2 = $(var)")
end
     #+end_src

     #+RESULTS:
     : a = 0.1 	 E = -0.24518438948809218 	 σ^2 = 0.026965218719722663
     : a = 0.2 	 E = -0.26966057967803525 	 σ^2 = 0.037197072370200784
     : a = 0.5 	 E = -0.3856357612517401 	 σ^2 = 0.053185967578480015
     : a = 0.9 	 E = -0.49435709786716214 	 σ^2 = 0.005778118170656099
     : a = 1.0 	 E = -0.5 	 σ^2 = 0.0
     : a = 1.5 	 E = -0.3924296708260237 	 σ^2 = 0.3144967090917285
     : a = 2.0 	 E = -0.08086980667845059 	 σ^2 = 1.806881427084649

* Variational Monte Carlo
** Computation of the statistical error
   :PROPERTIES:
   :header-args:julia: :tangle qmc_stats.jl
   :END:

   To compute the statistical error, you need to perform $M$
   independent Monte Carlo calculations. You will obtain $M$ different
   estimates of the energy, which are expected to have a Gaussian
   distribution for large $M$, according to the [[https://en.wikipedia.org/wiki/Central_limit_theorem][Central Limit Theorem]].

   The estimate of the energy is

   $$
   E = \frac{1}{M} \sum_{i=1}^M E_i
   $$

   The variance of the average energies can be computed as

   $$
   \sigma^2 = \frac{1}{M-1} \sum_{i=1}^{M} (E_i - E)^2
   $$

   And the confidence interval is given by

   $$
   E \pm \delta E, \text{ where } \delta E = \frac{\sigma}{\sqrt{M}}
   $$
*** Exercise
   #+begin_exercise
   Write a function returning the average and statistical error of an
   input array.
   #+end_exercise
**** Solution                                                     :solution:
    *Julia*
     #+BEGIN_SRC julia :results none :exports code

function ave_error(arr)
    M = length(arr)
    @assert(M>0)

    if M == 1
        average = arr[1]
        error   = 0.

    else
        average = sum(arr)/M
        variance = 1.0/(M-1) * ( arr |> x-> ( x .- average ).^2 |> sum )
        error = sqrt(variance/M)
    end

    return (average, error)
end
     #+END_SRC

** Uniform sampling in the box
   :PROPERTIES:
   :header-args:julia: :tangle qmc_uniform.jl
   :END:

*** Exercise

   One Monte Carlo run will consist of $N_{\rm MC}$ Monte Carlo iterations. At every Monte Carlo iteration:

   - Draw a random point $\mathbf{r}_i$ in the box $(-5,-5,-5) \le
     (x,y,z) \le (5,5,5)$
   - Compute $|\Psi(\mathbf{r}_i)|^2$ and accumulate the result in a
     variable =normalization=
   - Compute $|\Psi(\mathbf{r}_i)|^2 \times E_L(\mathbf{r}_i)$, and accumulate the
     result in a variable =energy=

   Once all the iterations have been computed, the run returns the average energy
   $\bar{E}_k$ over the $N_{\rm MC}$ iterations of the run.

   To compute the statistical error, perform $M$ independent runs. The
   final estimate of the energy will be the average over the
   $\bar{E}_k$, and the variance of the $\bar{E}_k$ will be used to
   compute the statistical error.

    #+begin_exercise
    Parameterize the wave function with $a=1.2$.  Perform 30
    independent Monte Carlo runs ($M$), each with 100 000 Monte Carlo
    steps ($N_{MC}$). Store the final energies of each run and use this array to
    compute the average energy and the associated error bar ($\delta E$).

    #+end_exercise
**** Solution                                                     :solution:
    *Julia*
     #+BEGIN_SRC julia  :results output :exports both
include("hydrogen.jl");
include("qmc_stats.jl");

function MonteCarlo(a, nmax)
     energy = 0.;
     normalization = 0.;

     for istep in range(1,nmax)

         R = 5.0;
         phi = rand()*2*π;
         costheta = rand()*2 - 1.0;
         u = rand();

         theta = acos( costheta );
         r = R * cbrt( u );

         # Spherical distribution
         x = r * sin( theta) * cos( phi );
         y = r * sin( theta) * sin( phi );
         z = r * cos( theta );
         # Cuboidal distribution
         #x = 10 * rand() - 5.0;
         #y = 10 * rand() - 5.0;
         #z = 10 * rand() - 5.0;
         r = [x,y,z];

         w = psi(a,r);
         w = w*w;

         energy        += w * e_loc(a,r);
         normalization += w;
     end

     return energy / normalization
end

a    = 1.2;
nmax = 100_000;

X = [MonteCarlo(a,nmax) for i in range(1,30)];
E, deltaE = ave_error(X);

println("E = $(E) +/- $(deltaE)")
     #+END_SRC

     #+RESULTS:
     : Sphere
     : E = -0.48024356420973185 +/- 0.001321161390324179
     : Cube
     : E = -0.4787870280458861 +/- 0.0020675933699247735

** Metropolis sampling with $\Psi^2$
   :PROPERTIES:
   :header-args:julia: :tangle qmc_metropolis.jl
   :END:

   We will now use the square of the wave function to sample random
   points distributed with the probability density
   \[
   P(\mathbf{r}) = \frac{|\Psi(\mathbf{r})|^2}{\int |\Psi(\mathbf{r})|^2 d\mathbf{r}}\,.
   \]

   The expression of the average energy is now simplified as the average of
   the local energies, since the weights are taken care of by the
   sampling:

   $$
   E \approx \frac{1}{N_{\rm MC}}\sum_{i=1}^{N_{\rm MC}} E_L(\mathbf{r}_i)\,.
   $$

   To sample a chosen probability density, an efficient method is the
   [[https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm][Metropolis-Hastings sampling algorithm]]. Starting from a random
   initial position $\mathbf{r}_0$, we will realize a random walk:

   $$ \mathbf{r}_0 \rightarrow \mathbf{r}_1 \rightarrow \mathbf{r}_2 \ldots \rightarrow \mathbf{r}_{N_{\rm MC}}\,, $$

   according to the following algorithm.

   At every step, we propose a new move according to a transition probability $T(\mathbf{r}_{n}\rightarrow\mathbf{r}_{n+1})$ of our choice.

   For simplicity, we will move the electron in a 3-dimensional box of side $2\delta L$ centered at the current position
   of the electron:

   $$
   \mathbf{r}_{n+1} = \mathbf{r}_{n} + \delta L \, \mathbf{u}
   $$

   where $\delta L$ is a fixed constant, and
   $\mathbf{u}$ is a uniform random number in a 3-dimensional box
   $(-1,-1,-1) \le \mathbf{u} \le (1,1,1)$.

   After having moved the electron, we add the
   accept/reject step that guarantees that the distribution of the
   $\mathbf{r}_n$ is $\Psi^2$. This amounts to accepting the move with
   probability

   $$
   A(\mathbf{r}_{n}\rightarrow\mathbf{r}_{n+1}) = \min\left(1,\frac{T(\mathbf{r}_{n+1}\rightarrow\mathbf{r}_{n}) P(\mathbf{r}_{n+1})}{T(\mathbf{r}_{n}\rightarrow\mathbf{r}_{n+1})P(\mathbf{r}_{n})}\right)\,,
   $$

   which, for our choice of transition probability, becomes

   $$
   A(\mathbf{r}_{n}\rightarrow\mathbf{r}_{n+1}) = \min\left(1,\frac{P(\mathbf{r}_{n+1})}{P(\mathbf{r}_{n})}\right)= \min\left(1,\frac{|\Psi(\mathbf{r}_{n+1})|^2}{|\Psi(\mathbf{r}_{n})|^2}\right)\,.
   $$

   #+begin_exercise
   Explain why the transition probability cancels out in the
   expression of $A$.
   #+end_exercise
   Also note that we do not need to compute the norm of the wave function!

   The algorithm is summarized as follows:

   1) Evaluate the local energy at $\mathbf{r}_n$ and accumulate it
   2) Compute a new position $\mathbf{r'} = \mathbf{r}_n + \delta L\, \mathbf{u}$
   3) Evaluate $\Psi(\mathbf{r}')$ at the new position
   4) Compute the ratio $A = \frac{\left|\Psi(\mathbf{r'})\right|^2}{\left|\Psi(\mathbf{r}_{n})\right|^2}$
   5) Draw a uniform random number $v \in [0,1]$
   6) if $v \le A$, accept the move : set $\mathbf{r}_{n+1} = \mathbf{r'}$
   7) else, reject the move : set $\mathbf{r}_{n+1} = \mathbf{r}_n$

   #+begin_note
    A common error is to remove the rejected samples from the
    calculation of the average. *Don't do it!*

    All samples should be kept, from both accepted /and/ rejected moves.
   #+end_note


*** Optimal step size

    If the box is infinitely small, the ratio will be very close
    to one and all the steps will be accepted. However, the moves will be
    very correlated and you will explore the configurational space very slowly.

    On the other hand, if you propose too large moves, the number of
    accepted steps will decrease because the ratios might become
    small. If the number of accepted steps is close to zero, then the
    space is not well sampled either.

    The size of the move should be adjusted so that it is as large as
    possible, keeping the number of accepted steps not too small. To
    achieve that, we define the acceptance rate as the number of
    accepted steps over the total number of steps. Adjusting the time
    step such that the acceptance rate is close to 0.5 is a good
    compromise for the current problem.

   #+begin_note
    Below, we use the symbol $\delta t$ to denote $\delta L$ since we will use
    the same variable later on to store a time step.
   #+end_note


*** Exercise

    #+begin_exercise
    Modify the program of the previous section to compute the energy,
    sampled with $\Psi^2$.

    Compute also the acceptance rate, so that you can adapt the time
    step in order to have an acceptance rate close to 0.5.

    Can you observe a reduction in the statistical error?
    #+end_exercise
**** Solution                                                     :solution:
    *Julia*
     #+BEGIN_SRC julia :results output :exports both
include("hydrogen.jl")
include("qmc_stats.jl")

function MonteCarlo(a,nmax,dt)
    energy  = 0.;
    N_accep = 0;

    x_old = rand()*2*dt - dt;
    y_old = rand()*2*dt - dt;
    z_old = rand()*2*dt - dt;
    r_old = [x_old,y_old,z_old];
    psi_old = psi(a,r_old);

    for istep in range(1,nmax)
        energy += e_loc(a,r_old);

        x_new = rand()*2*dt - dt;
        y_new = rand()*2*dt - dt;
        z_new = rand()*2*dt - dt;
        r_new = [x_new,y_new,z_new];
        r_new = r_old + r_new;
        psi_new = psi(a,r_new);

        ratio = (psi_new / psi_old)^2;

        if rand() <= ratio
            N_accep += 1;

            r_old   = r_new;
            psi_old = psi_new;
        end
    end

    return([energy/nmax, N_accep/nmax])
end

# Run simulation
a    = 1.2
nmax = 100000
dt   = 1.0

X0 = foldl(hcat,1:30 .|> x->MonteCarlo(a,nmax,dt))

# Energy
X = X0[1,:];
E, deltaE = ave_error(X)
print("E = $(E) +/- $(deltaE)")

# Acceptance rate
X = X0[2,:];
A, deltaA = ave_error(X)
print("A = $(A) +/- $(deltaA)")
     #+END_SRC

     #+RESULTS:
     : E = -0.4799712012519308 +/- 0.0004972233203530915:
     : A = 0.5076869999999999 +/- 0.0003981466113606039
